/*  Every time an instruction is executed, update the register file variable by using the 
    "writtenReg" and "writtenRegData" outputs of the processor.  Have the register file be in 
    the monitor system call somehow (will probably have to make 32 different variables for each 
    register. Syntax of monitor: $monitor ("format_string", par_1, par_2, ... );
*/

module Processor_tb;
  reg [31:0] instruction
  reg clk;

  wire [4:0] writtenRegAddress;
  wire [31:0] writtenRegData;
  wire ALU_zero_result;
  wire [1:0] test;

  Processor myProcessor(destReg, srcReg1, srcReg2, clk, ALU_result, ALU_zero_result, test);

  initial begin
  clk = 0;
  end
  always #50clk=~clk; /* 10MHz clock (50*1ns*2) with 50% duty-cycle */

  initial begin
  // Add contents of reg8(1) and reg 9(1) and store in reg10(0)
  destReg = 5'b01010; srcReg1 = 5'b01000; srcReg2 = 5'b01001;

  // wait 100 ns then add contents of reg8(1) and reg10(2) and store in reg 11(0) 
  #200 destReg = 5'b01011; srcReg1 = 5'b01000; srcReg2 = 5'b01010;

  // wait 100 ns then add contents of reg8(1) and reg9(0) and store in reg 11(3) 
  #200 destReg = 5'b01011; srcReg1 = 5'b01000; srcReg2 = 5'b01001;

  #100 $finish;  //stop simulation
  
end
endmodule